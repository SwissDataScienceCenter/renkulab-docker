# This set of github actions is used to automatically build the
# docker images for all of the containers we support. The build
# process is quite long as it involves building quite a few
# container images (maybe 20-30). We have considered trying to
# reduce this build time but it's a bit non trivial in our
# current configuration - the obvious q is to, say, detect if
# there are changes to e.g. docker/cuda and only build the cuda
# images in this case. The problem with this is that building the
# cuda images involves building the base python image, so we would
# build that, push it and tag it and then we would end up with a
# situation in which the cuda image is based on a renku-python image
# which has a tag which differs from, say, the r or julia images.
#
# Some solution might be possible which looks at previous commits
# and existing tags on docker images but this is a bit complex and
# probably requires having a clear model of dependencies and how
# they interact and what we're trying to achieve.
#
# It's probbaly worth noting here that the same action is used multiple
# times with multiple input parameters in the `matrix` variable to
# build different versions of the container; these parameters are then
# passed on to the makefile.

name: Renku Docker Image CI

on: [push]

env:
  DOCKER_PREFIX: renku/renkulab
  DEFAULT_PYTHON_VERSION: "3.10"

jobs:
  lint:
    strategy:
      fail-fast: true
      matrix:
        DOCKERFILE_PATH:
        - docker/py/Dockerfile
        - docker/r/Dockerfile
        - docker/cuda/Dockerfile
        - docker/vnc/Dockerfile
        - docker/matlab/Dockerfile
        - docker/julia/Dockerfile
        - docker/batch/Dockerfile
        - docker/qgis/Dockerfile
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: hadolint/hadolint-action@v2.0.0
      with:
        dockerfile: ${{ matrix.DOCKERFILE_PATH }}
        config: .hadolint.yaml

  build-py:
    needs: lint
    runs-on: ubuntu-latest

    strategy:
      fail-fast: true
      matrix:
        BASE_IMAGE_TAG:
          - lab-3.6.1
          - python-3.10.9
          - python-3.9.13
          - python-3.8.13

    steps:
    - name: Docker Login
      uses: Azure/docker-login@v1
      with:
        username: ${{ secrets.RENKU_DOCKER_USERNAME }}
        password: ${{ secrets.RENKU_DOCKER_PASSWORD }}

    - uses: actions/checkout@v3
    - name: Build renku project python-based docker images
      id: build-image
      run: |
        if [[ ${{ github.ref }} == refs/tags* ]]; then
          export LABEL=$(echo ${{ github.ref }} | cut -d / -f 3)
        else
          export LABEL=$(echo ${{ github.sha }} | cut -c 1-7)
        fi

        # This ensures the same image tags as before are built, in addition to new ones
        if [[ "${{ matrix.BASE_IMAGE_TAG }}" == lab-* ]]; then
          export RENKU_PYTHON_BASE_IMAGE_TAG=$DEFAULT_PYTHON_VERSION
        else
          export RENKU_PYTHON_BASE_IMAGE_TAG=${{ matrix.BASE_IMAGE_TAG }}
        fi

        # needed by the makefile - these are generated dynamically
        # and hence they are not part of the env setup above
        export BASE_IMAGE_TAG=${{ matrix.BASE_IMAGE_TAG }}
        export PY_DOCKER_LABEL="${RENKU_PYTHON_BASE_IMAGE_TAG}-${LABEL}"
        export GIT_COMMIT_SHA=$(git rev-parse --short=7 --verify HEAD)
        make py 
        echo "IMAGE_NAME=${DOCKER_PREFIX}-py:${PY_DOCKER_LABEL}" >> $GITHUB_OUTPUT

    - name: Image Acceptance Tests
      uses: cypress-io/github-action@v4
      env:
        TEST_IMAGE_NAME: ${{ steps.build-image.outputs.IMAGE_NAME }}
        TEST_USER_NAME: jovyan
        TEST_SPEC: jupyterlab.cy.ts
      with:
        working-directory: tests
        command: npx mocha -r ts-node/register index.ts

    - name: Push to docker
      run: |
        docker push ${{ steps.build-image.outputs.IMAGE_NAME }}

        # on master push latest image - the lab-* image is tagged latest
        if [ "$REF" == "refs/heads/master" ] && [ "${{ matrix.BASE_IMAGE_TAG }}" == lab-* ]; then
          docker tag ${{ steps.build-image.outputs.IMAGE_NAME }} $DOCKER_PREFIX-py:latest
          docker push $DOCKER_PREFIX-py:latest
        fi

  build-cuda:
    needs: build-py
    runs-on: ubuntu-latest

    strategy:
      fail-fast: true
      matrix:
        include:
          # taken from tensorflow compatibility chart at https://www.tensorflow.org/install/source#gpu
          - CUDA_VERSION: "11.2"
            EXTRA_LIBRARIES: ""
            CUDA_CUDART_PACKAGE: "cuda-cudart-11-2=11.2.152-1"
            CUDA_COMPAT_PACKAGE: "cuda-compat-11-2"
            LIBCUDNN_PACKAGE: "libcudnn8=8.1.1.33-1+cuda11.2"
          - CUDA_VERSION: "11.3"
            EXTRA_LIBRARIES: ""
            CUDA_CUDART_PACKAGE: "cuda-cudart-11-3=11.3.109-1"
            CUDA_COMPAT_PACKAGE: "cuda-compat-11-3"
            LIBCUDNN_PACKAGE: "libcudnn8=8.2.1.32-1+cuda11.3"
          - CUDA_VERSION: "11.4"
            EXTRA_LIBRARIES: ""
            CUDA_CUDART_PACKAGE: "cuda-cudart-11-4=11.4.148-1"
            CUDA_COMPAT_PACKAGE: "cuda-compat-11-4"
            LIBCUDNN_PACKAGE: "libcudnn8=8.2.4.15-1+cuda11.4"
          - CUDA_VERSION: "11.5"
            EXTRA_LIBRARIES: ""
            CUDA_CUDART_PACKAGE: "cuda-cudart-11-5=11.5.117-1"
            CUDA_COMPAT_PACKAGE: "cuda-compat-11-5"
            LIBCUDNN_PACKAGE: "libcudnn8=8.3.2.44-1+cuda11.5"
          - CUDA_VERSION: "11.7"
            EXTRA_LIBRARIES: ""
            CUDA_CUDART_PACKAGE: "cuda-cudart-11-7=11.7.60-1"
            CUDA_COMPAT_PACKAGE: "cuda-compat-11-7"
            LIBCUDNN_PACKAGE: "libcudnn8=8.5.0.96-1+cuda11.7"
          # note cuda 11.8 is available now, but there I could not
          # find a cuda-compat package in the ubuntu repos at this time

    steps:
    - name: Docker Login
      uses: Azure/docker-login@v1
      with:
        username: ${{ secrets.RENKU_DOCKER_USERNAME }}
        password: ${{ secrets.RENKU_DOCKER_PASSWORD }}

    - uses: actions/checkout@v3  
    - name: Build renku project python-based docker image extensions
      id: build-image
      run: |
        if [[ ${{ github.ref }} == refs/tags* ]]; then
          export LABEL=$(echo ${{ github.ref }} | cut -d / -f 3)
        else
          export LABEL=$(echo ${{ github.sha }} | cut -c 1-7)
        fi
        docker pull ${DOCKER_PREFIX}-py:${DEFAULT_PYTHON_VERSION}-${LABEL}

        # these are set dynamically so not part of env
        export CUDA_COMPAT_PACKAGE="${{ matrix.CUDA_COMPAT_PACKAGE }}" 
        export CUDA_CUDART_PACKAGE="${{ matrix.CUDA_CUDART_PACKAGE }}" 
        export CUDA_VERSION="${{ matrix.CUDA_VERSION }}" 
        export CUDA_DOCKER_LABEL="${{ matrix.CUDA_VERSION }}-${LABEL}"
        export EXTRA_LIBRARIES="${{ matrix.EXTRA_LIBRARIES }}" 
        export LIBCUDNN_PACKAGE="${{ matrix.LIBCUDNN_PACKAGE }}" 
        make cuda
        echo "IMAGE_NAME=$DOCKER_PREFIX-cuda:$CUDA_DOCKER_LABEL" >> $GITHUB_OUTPUT
        
    - name: Image Acceptance Tests
      uses: cypress-io/github-action@v4
      env:
        TEST_IMAGE_NAME: ${{ steps.build-image.outputs.IMAGE_NAME }}
        TEST_USER_NAME: jovyan
        TEST_SPEC: jupyterlab.cy.ts
      with:
        working-directory: tests
        command: npx mocha -r ts-node/register index.ts
    - name: Push to docker
      run: |
        docker push ${{ steps.build-image.outputs.IMAGE_NAME }}

        # on master push latest image
        if [ "$REF" == "refs/heads/master" ] && [ "${{ matrix.CUDA_VERSION }}" == "11.7" ]; then
          docker tag ${{ steps.build-image.outputs.IMAGE_NAME }} $DOCKER_PREFIX-cuda:latest
          docker push $DOCKER_PREFIX-cuda:latest
        fi

  build-py-ext:
    needs: build-py
    runs-on: ubuntu-latest

    strategy:
      fail-fast: true
      matrix:
        EXTENSIONS:
          - vnc
          - batch

    steps:
    - name: Docker Login
      uses: Azure/docker-login@v1
      with:
        username: ${{ secrets.RENKU_DOCKER_USERNAME }}
        password: ${{ secrets.RENKU_DOCKER_PASSWORD }}

    - uses: actions/checkout@v3
    - name: Build renku project python-based docker image extensions
      env:
        EXTENSION: ${{ matrix.EXTENSIONS }}
      run: |
        if [[ ${{ github.ref }} == refs/tags* ]]; then
          export LABEL=$(echo ${{ github.ref }} | cut -d / -f 3)
        else
          export LABEL=$(echo ${{ github.sha }} | cut -c 1-7)
        fi
        docker pull ${DOCKER_PREFIX}-py:${DEFAULT_PYTHON_VERSION}-${LABEL}
        
        # needed by the makefile - for these images, we only tag with commit sha
        export EXTRA_DOCKER_LABEL="${LABEL}"
        make $EXTENSION 
        docker push $DOCKER_PREFIX-$EXTENSION:$LABEL

  build-vnc-ext:
    needs: build-py-ext
    runs-on: ubuntu-latest

    strategy:
      fail-fast: true
      matrix:
        VNC-EXTENSIONS:
          - matlab
          - qgis

    steps:
    - name: Docker Login
      uses: Azure/docker-login@v1
      with:
        username: ${{ secrets.RENKU_DOCKER_USERNAME }}
        password: ${{ secrets.RENKU_DOCKER_PASSWORD }}

    - uses: actions/checkout@v3
    - name: Build renku project python-based docker image extensions
      env:
        EXTENSION: ${{ matrix.VNC-EXTENSIONS }}
      run: |
        if [[ ${{ github.ref }} == refs/tags* ]]; then
          export LABEL=$(echo ${{ github.ref }} | cut -d / -f 3)
        else
          export LABEL=$(echo ${{ github.sha }} | cut -c 1-7)
        fi
        docker pull ${DOCKER_PREFIX}-py:${DEFAULT_PYTHON_VERSION}-${LABEL}
        docker pull ${DOCKER_PREFIX}-vnc:${LABEL}

        # needed by the Makefile
        export EXTRA_DOCKER_LABEL="${LABEL}"
        make vnc-$EXTENSION
        docker push $DOCKER_PREFIX-$EXTENSION:$LABEL

  build-julia-ext:
    needs: build-py
    runs-on: ubuntu-latest

    strategy:
      fail-fast: true
      matrix:
        JULIAVERSIONS:
          - 1.7.1

    steps:
    - name: Docker Login
      uses: Azure/docker-login@v1
      with:
        username: ${{ secrets.RENKU_DOCKER_USERNAME }}
        password: ${{ secrets.RENKU_DOCKER_PASSWORD }}

    - uses: actions/checkout@v3
    - name: Build renku project julia docker image extensions
      id: build-image
      run: |
        if [[ ${{ github.ref }} == refs/tags* ]]; then
          export LABEL=$(echo ${{ github.ref }} | cut -d / -f 3)
        else
          export LABEL=$(echo ${{ github.sha }} | cut -c 1-7)
        fi
        docker pull ${DOCKER_PREFIX}-py:${DEFAULT_PYTHON_VERSION}-${LABEL}

        # needed by the makefile
        export JULIA_DOCKER_LABEL="${{ matrix.JULIAVERSIONS }}-$LABEL"
        export GIT_COMMIT_SHA=$(git rev-parse --short=7 --verify HEAD)
        export JULIAVERSION="${{ matrix.JULIAVERSIONS }}"
        make julia
        echo "IMAGE_NAME=$DOCKER_PREFIX-julia:$JULIA_DOCKER_LABEL" >> $GITHUB_OUTPUT
        
    - name: Image Acceptance Tests
      uses: cypress-io/github-action@v4
      env:
        TEST_IMAGE_NAME: ${{ steps.build-image.outputs.IMAGE_NAME }}
        TEST_USER_NAME: jovyan
        TEST_SPEC: jupyterlab.cy.ts
      with:
        working-directory: tests
        command: npx mocha -r ts-node/register index.ts
    - name: Push to docker
      run: |
        docker push ${{ steps.build-image.outputs.IMAGE_NAME }}
        
  build-r-ubuntu:
    needs: build-py
    runs-on: ubuntu-latest

    strategy:
      fail-fast: true
      matrix:
        include:
          - RVERSION: 4.1.0
            RSTUDIO_VERSION: 2022.02.3-492
          - RVERSION: 4.1.1
            RSTUDIO_VERSION: 2022.02.3-492
          - RVERSION: 4.1.2
            RSTUDIO_VERSION: 2022.02.3-492
          - RVERSION: 4.2.0
            RSTUDIO_VERSION: 2022.02.3-492
          - RVERSION: devel
            RSTUDIO_VERSION: 2022.02.3-492
    steps:
    - name: Docker Login
      uses: Azure/docker-login@v1
      with:
        username: ${{ secrets.RENKU_DOCKER_USERNAME }}
        password: ${{ secrets.RENKU_DOCKER_PASSWORD }}

    - uses: actions/checkout@v3
    - name: Build renku project rocker docker images
      id: build-image
      run: |
        if [[ ${{ github.ref }} == refs/tags* ]]; then
          export LABEL=$(echo ${{ github.ref }} | cut -d / -f 3)
        else
          export LABEL=$(echo ${{ github.sha }} | cut -c 1-7)
        fi
        docker pull ${DOCKER_PREFIX}-py:${DEFAULT_PYTHON_VERSION}-${LABEL}

        # needed by the makefile
        export RVERSION="${{ matrix.RVERSION }}"
        export R_DOCKER_LABEL="${{ matrix.RVERSION }}-$LABEL"
        export RSTUDIO_BASE_IMAGE="rocker/verse:${{ matrix.RVERSION }}" 
        export RSTUDIO_VERSION_OVERRIDE="${{ matrix.RSTUDIO_VERSION }}"
        make r
        echo "IMAGE_NAME=$DOCKER_PREFIX-r:$R_DOCKER_LABEL" >> $GITHUB_OUTPUT

    - name: Image Acceptance Tests
      uses: cypress-io/github-action@v4
      env:
        TEST_IMAGE_NAME: ${{ steps.build-image.outputs.IMAGE_NAME }}
        TEST_ENV: rstudio
        TEST_USER_NAME: rstudio
        TEST_SPEC: rstudio.cy.ts
      with:
        working-directory: tests
        command: npx mocha -r ts-node/register index.ts

    - name: Push to docker
      run: |
        docker push ${{ steps.build-image.outputs.IMAGE_NAME }}

        # on master push latest image
        if [ "$REF" == "refs/heads/master" ] && [ "${{ matrix.RVERSION }}" == "4.2.0" ]
        then
          docker tag ${{ steps.build-image.outputs.IMAGE_NAME }} $DOCKER_PREFIX-r:latest
          docker push $DOCKER_PREFIX-r:latest
        fi

  build-bioc:
    needs: build-py
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        RELEASE:
          - RELEASE_3_14
          - RELEASE_3_15
          - RELEASE_3_16
          - RELEASE_3_17
          - devel
    steps:
    - name: Docker Login
      uses: Azure/docker-login@v1
      with:
        username: ${{ secrets.RENKU_DOCKER_USERNAME }}
        password: ${{ secrets.RENKU_DOCKER_PASSWORD }}

    - uses: actions/checkout@v3
    - name: Build renku project bioconductor docker images
      run: |
        if [[ ${{ github.ref }} == refs/tags* ]]; then
          export LABEL=$(echo ${{ github.ref }} | cut -d / -f 3)
        else
          export LABEL=$(echo ${{ github.sha }} | cut -c 1-7)
        fi
        docker pull ${DOCKER_PREFIX}-py:${DEFAULT_PYTHON_VERSION}-${LABEL}

        # needed by the makefile
        export BIOC_DOCKER_LABEL="${{ matrix.RELEASE }}-$LABEL"
        export BIOC_VERSION="${{ matrix.RELEASE }}"
        make bioc
        docker push $DOCKER_PREFIX-bioc:$BIOC_DOCKER_LABEL

        # on master push latest image
        if [ "$REF" == "refs/heads/master" ] && [ "${{ matrix.RELEASE }}" == "devel" ]
        then
          docker tag $DOCKER_PREFIX-bioc:$BIOC_DOCKER_LABEL $DOCKER_PREFIX-bioc:latest
          docker push $DOCKER_PREFIX-bioc:latest
        fi

